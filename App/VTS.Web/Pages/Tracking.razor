@page "/tracking"
<h3>VesselTracking</h3>
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@inject IJSRuntime IJS

<h1>Google Map</h1>

<GoogleMap @ref="@map1" Id="map1" Options="@mapOptions" Height="350" OnAfterInit="@(async () => await OnAfterInitAsync())"></GoogleMap>
<button @onclick="AddDirections">Add Direction</button>
<p>
    Duration: @_durationTotalString <br />
    Distance: @_distanceTotalString <br />
</p>

@code {
    int CounterDot = 0;
    InfoWindow infoWindow;
    private GoogleMap map1;
    private MapOptions mapOptions;
    private DirectionsRenderer dirRend;
    private string _durationTotalString;
    private string _distanceTotalString;
    Polyline poly;
    List<LatLngLiteral> pathList;
    protected override void OnInitialized()
    {
        mapOptions = new MapOptions()
        {
            Zoom = 13,
            Center = new LatLngLiteral()
            {
                Lat = 40.603629,
                Lng = -75.472518
            },
            MapTypeId = MapTypeId.Roadmap
        };
    }

    private async Task OnAfterInitAsync()
    {
        //Create instance of DirectionRenderer
        dirRend = await DirectionsRenderer.CreateAsync(map1.JsRuntime, new DirectionsRendererOptions()
        {
            Map = map1.InteropObject
        });

        poly = await Polyline.CreateAsync(IJS);
        await poly.SetMap(map1.InteropObject);
        await map1.InteropObject.AddListener<PolyMouseEvent>("click", async (x) => { await addLatLng(x); });
        infoWindow = await InfoWindow.CreateAsync(IJS);
    }

    async Task addLatLng(PolyMouseEvent e)
    {
        CounterDot++;
        if (pathList == null)
            pathList = new List<LatLngLiteral>();
        pathList.Add(e.LatLng);

        // Because path is an MVCArray, we can simply append a new coordinate
        // and it will automatically appear.
        await poly.SetPath(pathList);
        var marker = await Marker.CreateAsync(IJS);
        await marker.SetPosition(e.LatLng);
        var title = $"Point No.{CounterDot}";

        await marker.SetMap(map1.InteropObject);
        await marker.AddListener<MouseEvent>("click", async (x) => await showInfo(x, title));

        var newTriangle = await Polygon.CreateAsync(IJS);
        await newTriangle.SetPath(GetArrowFromPosition(e.LatLng, 0.001f, 90));
        await newTriangle.SetOptions(new PolygonOptions() { StrokeColor = "#FF0000", StrokeOpacity = 0.8f, StrokeWeight = 3, FillColor = "#FF0000", FillOpacity = 0.9f });
        await newTriangle.SetMap(map1.InteropObject);
    }

    List<LatLngLiteral> GetArrowFromPosition(LatLngLiteral pos, float size = 0.1f, int Degree = 0)
    {
        var list = new List<LatLngLiteral>();
        var vec1 = VectorExtentions.Rotate(new PointXY(pos.Lat, pos.Lng - size), Degree, new PointXY(pos.Lat, pos.Lng));
        var vec2 = VectorExtentions.Rotate(new PointXY(pos.Lat - (size / 2), pos.Lng + size), Degree, new PointXY(pos.Lat, pos.Lng));
        var vec3 = VectorExtentions.Rotate(new PointXY(pos.Lat + (size / 2), pos.Lng + size), Degree, new PointXY(pos.Lat, pos.Lng));
        list.Add(new LatLngLiteral() { Lat = vec1.X, Lng = vec1.Y });
        list.Add(new LatLngLiteral() { Lat = vec2.X, Lng = vec2.Y });
        list.Add(new LatLngLiteral() { Lat = vec3.X, Lng = vec3.Y });

        return list;
    }

    async Task showInfo(MouseEvent e, string Message)
    {
        var contentString = $"{Message}";// -> { e.LatLng.Lat} ,{ e.LatLng.Lng}
        // Replace the info window's content and position.
        await infoWindow.SetContent(contentString);
        await infoWindow.SetPosition(e.LatLng);
        await infoWindow.Open(map1.InteropObject);
    }

    private async Task AddDirections()
    {

        //Adding a waypoint
        var waypoints = new List<DirectionsWaypoint>();
        waypoints.Add(new DirectionsWaypoint() { Location = "Bethlehem, PA", Stopover = true });

        //Direction Request
        DirectionsRequest dr = new DirectionsRequest();
        dr.Origin = "Allentown, PA";
        dr.Destination = "Bronx, NY";
        dr.Waypoints = waypoints;
        dr.TravelMode = TravelMode.Driving;

        //Calculate Route
        var directionsResult = await dirRend.Route(dr);
        foreach (var route in directionsResult.Routes.SelectMany(x => x.Legs))
        {
            _durationTotalString += route.Duration.Text;
            _distanceTotalString += route.Distance.Text;
        }
    }
}
