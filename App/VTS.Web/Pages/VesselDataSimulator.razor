@page "/vessel-simulator"
@using Blazor.Extensions
@inject INotificationService NotificationService
@inject RedisDB redis1;

<h3>Vessel Data Simulator</h3>
<form>
    <div class="form-group">
        <label for="shipmmsi">Select Ship MMSI:</label>
        <select id="shipmmsi" class="form-control" @onchange="@SelectShip">

            <option value=""></option>
            @if (MMSIs != null)
                @foreach (var mmsi in MMSIs)
                {
                    <option value="@mmsi"> @mmsi </option>
                }
        </select>
    </div>
    <div class="form-group">
        <label for="regno">RegNo:</label>
        <input type="text" @bind="@NewShip.Info.RegInfo" class="form-control" id="regno">
    </div>
    <div class="form-group">
        <label for="vesname">Vessel Name:</label>
        <input type="text" @bind="@NewShip.Info.VesselName" class="form-control" id="vesname">
    </div>
    <div class="form-group">
        <label for="agent">Agent:</label>
        <input type="text" @bind="@NewShip.Info.Agent" class="form-control" id="agent">
    </div>
    <div class="form-group">
        <label for="voyage">Voyage:</label>
        <input type="text" @bind="@NewShip.Info.Voyage" class="form-control" id="voyage">
    </div>
    <div class="form-group">
        <label for="fromport">From Port:</label>
        <input type="text" @bind="@NewShip.Info.FromPort" class="form-control" id="fromport">
    </div>
    <div class="form-group">
        <label for="toport">To Port:</label>
        <input type="text" @bind="@NewShip.Info.ToPort" class="form-control" id="toport">
    </div>
    <div class="form-group">
        <label for="status">Status:</label>
        <select id="status" class="form-control" @bind="@NewShip.Info.Status">
            <option value="Anchor"> Anchor </option>
            <option value="AnchorNotPlotting"> Anchor Not Plotting </option>
            <option value="Departure"> Departure </option>
            <option value="Berthing"> Berthing </option>
            <option value="Outside"> Outside </option>
        </select>
    </div>

    <div class="form-group">
        <label for="discharge">Est Discharge:</label>
        <input type="number" @bind="@NewShip.Activity.EstDischarge" class="form-control" id="discharge">
    </div>
    <div class="form-group">
        <label for="load">Est Load:</label>
        <input type="number" @bind="@NewShip.Activity.EstLoad" class="form-control" id="load">
    </div>
    <div class="form-group">
        <label for="frommeter">From Meter:</label>
        <input type="number" @bind="@NewShip.Activity.EstFromMeter" class="form-control" id="frommeter">
    </div>
    <div class="form-group">
        <label for="tometer">To Meter:</label>
        <input type="number" @bind="@NewShip.Activity.EstToMeter" class="form-control" id="tometer">
    </div>
    <div class="form-group">
        <label for="equipment">Equipment:</label>
        <input type="number" @bind="@NewShip.Activity.EstEquipment" class="form-control" id="equipment">
    </div>
    <div class="form-group">
        <label for="equipmentname">Equipment Name:</label>
        <input type="text" @bind="@NewShip.Activity.EstEquipmentName" class="form-control" id="equipmentname">
    </div>

    <button type="button" @onclick="@RandomData" class="btn btn-info">Random Data</button>
    <button type="button" @onclick="@SaveData" class="btn btn-success">Insert Data</button>
</form>
@code {
    uint SelectedMmsi;
    VesselData Ships;
    List<uint> MMSIs;
    VTS.Shared.VesselData NewShip;
    List<VesselInfo> AllShips;
    Random rnd;
    bool IsSupportedByBrowser;
    async Task SaveData()
    {
        if (NewShip != null)
        {
            NewShip.Id = redis1.GetSequence<VTS.Shared.VesselData>();
            var existingData = redis1.GetAllData<VTS.Shared.VesselData>();
            if (existingData != null)
            {
                var exist = existingData.Where(x => x.Mmsi == NewShip.Mmsi).FirstOrDefault();
                if (exist != null)
                {
                    NewShip.Id = exist.Id;
                }
            }

            var res = redis1.InsertData<VTS.Shared.VesselData>(NewShip);
            if (res && IsSupportedByBrowser)
            {
                await NotificationService.CreateAsync("Save to DB", "Save data is successfully", "https://img.icons8.com/material-outlined/24/000000/info.png");
            }
        }
    }
    void SelectShip(ChangeEventArgs e)
    {
        var selectedString = e.Value.ToString();
        SelectedMmsi = uint.Parse(selectedString);
        var selShip = (from x in AllShips
                       where x.Mmsi == SelectedMmsi
                       select x).FirstOrDefault();
        if (selShip != null)
        {
            NewShip.Info.FromPort = "Jakarta";
            NewShip.Info.Agent = "PT. ABCDE";
            NewShip.Info.RegInfo = shortid.ShortId.Generate(false, false, 10).ToUpper();
            NewShip.Info.Status = selShip.Status;
            NewShip.Info.ToPort = selShip.Dest;
            NewShip.Info.VesselName = selShip.ShipName;
            NewShip.Info.Voyage = $"{rnd.Next(10, 200)}/{rnd.Next(1, 50)}";
            NewShip.Mmsi = selShip.Mmsi;
            RandomData();
        }
        //Console.WriteLine("It is definitely: " + selectedString);
    }

    void RandomData()
    {
        if (NewShip != null)
        {
            NewShip.Activity.EstDischarge = rnd.Next(10, 100);
            NewShip.Activity.EstEquipment = rnd.Next(1, 10);
            int xx = rnd.Next(1, 5);
            NewShip.Activity.EstEquipmentName = $"CC0{xx}-CC0{xx + rnd.Next(3)}";
            xx = rnd.Next(10, 800);
            NewShip.Activity.EstFromMeter = xx;
            NewShip.Activity.EstToMeter = xx + rnd.Next(50, 200);
            NewShip.Activity.EstLoad = rnd.Next(10, 100);
            //time
            var now = DateTime.Now;
            var selDate = new DateTime(now.Year, now.Month, now.Day);
            selDate = selDate.AddHours(rnd.Next(1, 10));
            NewShip.Schedule.EstTimeArrival = selDate;

            selDate = selDate.AddHours(rnd.Next(1, 3));
            NewShip.Schedule.EstTimeBerthing = selDate;

            selDate = selDate.AddHours(rnd.Next(1, 5));
            NewShip.Schedule.EstStartWork = selDate;

            selDate = selDate.AddHours(rnd.Next(1, 10));
            NewShip.Schedule.EstEndWork = selDate;

            selDate = selDate.AddHours(rnd.Next(1, 5));
            NewShip.Schedule.EstTimeDeparture = selDate;

            NewShip.Schedule.RealTimeAnchor = NewShip.Schedule.EstTimeDeparture.AddHours(rnd.Next(1, 3));
            NewShip.Schedule.RealTimeBerthing = NewShip.Schedule.RealTimeAnchor.AddHours(rnd.Next(1, 3));
            NewShip.Schedule.RealTimePlan = NewShip.Schedule.EstTimeArrival.AddHours(-1);

        }
    }

    List<uint> GetAllMMSIs()
    {
        var items = new List<uint>();
        AllShips = Ships.GetAllShipInArea(null);
        foreach (var item in AllShips)
        {
            items.Add(item.Mmsi);
        }
        return items;
    }

    protected override void OnInitialized()
    {
        rnd = new Random();

        Ships = new VesselData(redis1);
        Ships.QueryDataFromDB();
        MMSIs = GetAllMMSIs();
        NewShip = new VTS.Shared.VesselData() { Activity = new VTS.Shared.VesselActivity(), Info = new VTS.Shared.VesselInformation(), Schedule = new VTS.Shared.TimeManagement() };

    }

    private async Task OnAfterInitAsync()
    {
        IsSupportedByBrowser = await NotificationService.IsSupportedByBrowserAsync();
        if (IsSupportedByBrowser) {
            PermissionType permission = await NotificationService.RequestPermissionAsync();
        }
    }

}
