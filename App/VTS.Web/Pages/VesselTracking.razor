@page "/vessel-tracking"
@page "/"

<h3>Vessel Tracking System</h3>
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@inject RedisDB redis1;
@inject IJSRuntime IJS
@inject BlazorTimer Timer
@using VTS.Web.Data

<GoogleMap @ref="@map1" Id="map1" Options="@mapOptions" Height="700" OnAfterInit="@(async () => await OnAfterInitAsync())"></GoogleMap>
<button class="btn btn-info mt-3" @onclick="SetArea">Set Area</button>


@code {
        int CounterDot = 0;
        InfoWindow infoWindow;
    private GoogleMap map1;
    private MapOptions mapOptions;


    Polyline poly;
    Polygon SelectedArea;
    List<LatLngLiteral> pathList;
    List<LatLngLiteral> AreaObservation;
    VesselData Ships;
    Dictionary<uint, VesselLocation> ShipLocations;

    async Task SetArea()
    {
        if (pathList != null && pathList.Count > 2)
        {
            if (AreaObservation == null)
                AreaObservation = new List<LatLngLiteral>();
            else AreaObservation.Clear();
            foreach (var item in pathList)
            {
                AreaObservation.Add(item);
            }
            var newPathList = new List<LatLngLiteral>(pathList);
            newPathList.Add(pathList[0]);
            await poly.SetPath(newPathList);

            if(SelectedArea==null)
            {
                SelectedArea=await Polygon.CreateAsync(IJS);
                await SelectedArea.SetMap(map1.InteropObject);
                await SelectedArea.SetOptions(new PolygonOptions() { StrokeColor = "#2ECC71", StrokeOpacity = 0.8f, StrokeWeight = 3, FillColor = "#EAFAF1", FillOpacity = 0.3f });
            }

            await SelectedArea.SetPath(newPathList);


            Console.WriteLine("area has been set.");
        }

    }
    protected override void OnInitialized()
    {
        mapOptions = new MapOptions()
        {
            Zoom = 13,
            Center = new LatLngLiteral()
            {
                Lat = 70.629553333333334,
                Lng = 29.72465
            },
            MapTypeId = MapTypeId.Sattellite
        };
        Ships = new VesselData(redis1);

    }

    private async Task OnAfterInitAsync()
    {

        poly = await Polyline.CreateAsync(IJS);
        await poly.SetMap(map1.InteropObject);
        await map1.InteropObject.AddListener<PolyMouseEvent>("click", async (x) => { await addLatLng(x); });
        infoWindow = await InfoWindow.CreateAsync(IJS);

        ShipLocations = new Dictionary<uint, VesselLocation>();

        Timer.SetTimer(AppConstants.TimeInterval);
        Timer.OnElapsed += QueryDataPeriodically;
        QueryDataPeriodically();
    }
    async void QueryDataPeriodically()
    {
        if (Ships != null)
        {
            var res = Ships.QueryDataFromDB();
            if (res)
            {
                var dataKapal = Ships.GetAllShipInArea(AreaObservation);
                var shipMMSI = new HashSet<uint>();
                dataKapal.ForEach(x => shipMMSI.Add(x.Mmsi));
                if (ShipLocations != null && ShipLocations.Count > 0)
                {
                    //remove old ships
                    var removeMmmsi = new List<uint>();
                    foreach(var key in ShipLocations.Keys)
                    {
                        if (!shipMMSI.Contains(key))
                            removeMmmsi.Add(key);

                    }
                    foreach(var item in removeMmmsi)
                    {
                        //await ShipLocations[item].ShipLocation.SetMap(null);
                        await ShipLocations[item].ShipMarker.SetMap(null);
                        ShipLocations.Remove(item);
                    }
                }
                foreach (var item in dataKapal)
                {
                    //add new ship
                    if (!ShipLocations.ContainsKey(item.Mmsi))
                    {
                        var newVesselLoc = new VesselLocation();
                        //add polygon
                        var myPos = new LatLngLiteral() { Lat = item.Lat, Lng = item.Lng };
                        /*
                        var newTriangle = await Polygon.CreateAsync(IJS);
                        var Heading = item.Direction.HasValue ? item.Direction.Value : 0;
                        await newTriangle.SetPath(GetArrowFromPosition(myPos, 0.001f, (int)Heading));
                        await newTriangle.SetOptions(new PolygonOptions() { StrokeColor = "#FF0000", StrokeOpacity = 0.8f, StrokeWeight = 3, FillColor = "#FF0000", FillOpacity = 0.9f });
                        await newTriangle.SetMap(map1.InteropObject);
                        newVesselLoc.ShipLocation =newTriangle;*/
                        //add marker
                        var marker = await Marker.CreateAsync(IJS);
                        await marker.SetPosition(myPos);
                        await marker.SetMap(map1.InteropObject);
                        await marker.AddListener<MouseEvent>("click", async (x) => await showInfo(x, item.Mmsi));
                        newVesselLoc.ShipMarker = marker;
                        //add ship info
                        newVesselLoc.ShipInfo = item;
                        ShipLocations.Add(item.Mmsi, newVesselLoc);
                    }
                    else //update existing ship
                    {
                        var newVesselLoc = ShipLocations[item.Mmsi];
                        //add polygon

                        var myPos = new LatLngLiteral() { Lat = item.Lat, Lng = item.Lng };
                        /*
                        var newTriangle = newVesselLoc.ShipLocation;
                        var Heading = item.Direction.HasValue ? item.Direction.Value : 0;
                        await newTriangle.SetPath(GetArrowFromPosition(myPos, 0.001f, (int)Heading));
                        */
                        //add marker
                        var marker = ShipLocations[item.Mmsi].ShipMarker;
                        await marker.SetPosition(myPos);
                        //add ship info
                        newVesselLoc.ShipInfo = item;
                    }
                }

            }
        }
    }
    async Task addLatLng(PolyMouseEvent e)
    {
        CounterDot++;
        if (pathList == null)
            pathList = new List<LatLngLiteral>();
        if (AreaObservation != null)
        {
            AreaObservation = null;
            pathList.Clear();
            if (SelectedArea != null)
            {
                await SelectedArea.SetMap(null);
                SelectedArea = null;
            }
        }

        pathList.Add(e.LatLng);

        // Because path is an MVCArray, we can simply append a new coordinate
        // and it will automatically appear.
        await poly.SetPath(pathList);




    }

    List<LatLngLiteral> GetArrowFromPosition(LatLngLiteral pos, float size = 0.1f, int Degree = 0)
    {
        var list = new List<LatLngLiteral>();
        var vec1 = new PointXY(pos.Lng,pos.Lat);
        var vec2 = VectorExtentions.Rotate(new PointXY(pos.Lng + size,pos.Lat - (size / 2)), Degree, new PointXY(pos.Lng,pos.Lat));
        var vec3 = VectorExtentions.Rotate(new PointXY(pos.Lng + size,pos.Lat + (size / 2)), Degree, new PointXY(pos.Lng,pos.Lat));
        list.Add(new LatLngLiteral() { Lat = vec1.Y, Lng = vec1.X });
        list.Add(new LatLngLiteral() { Lat = vec2.Y, Lng = vec2.X });
        list.Add(new LatLngLiteral() { Lat = vec3.Y, Lng = vec3.X });

        return list;
    }

    async Task showInfo(MouseEvent e, uint mmsi)
    {
        if (!ShipLocations.ContainsKey(mmsi)) return;
        var item = ShipLocations[mmsi].ShipInfo;
        var title = $"Ship Name : {item.ShipName}<br/>";
        title += $"Lat: {item.Lat}<br/>";
        title += $"Lon: {item.Lng}<br/>";
        title += $"Destination: {item.Dest}<br/>";
        title += $"Speed: {item.Speed}<br/>";
        title += $"Course: {item.Course}<br/>";
        title += $"Status: {item.Status}<br/>";
        title += $"ETA: {item.ETA}<br/>";
        if(item.Direction.HasValue)
            title += $"Heading: {item.Direction.Value}<br/>";


        var contentString = $"{title}";
        await infoWindow.SetContent(contentString);
        await infoWindow.SetPosition(e.LatLng);
        await infoWindow.Open(map1.InteropObject);
    }


}
